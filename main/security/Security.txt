1. ACL(Access Control List)
   三个关键要素：User、Resource(资源)或Object(对象)、Operation(操作，如view, add, 
   delete, modify)。
   而Permission(许可)或Privilege(特权)＝Resource＋Operation，表示对资源的一个操作。
   典型的如Linux的文件访问控制权限。
   有篇深入的文章：基于访问控制列表的权限管理模型研究--《信息网络安全》2011年05期
2. RBAC(Role-Based Access Control)
1>.关键概念：
   用户(User)、角色(Role)、权限(Permission)、操作(Operation)、
   对象(Object)或资源(Resource)、会话(Session)。
2>.关于资源(Resource)，我认为：
   a.资源具有层次和包含关系。例如，网页是资源，网页上的按钮、文本框等也是资源。
   b.有些资源由通用权限管理系统进行管理。
     而有些资源（或数据）则由应用系统来管控。因为这些资源的权限判定常跟业务逻辑
     有很大的关联，对不同的业务逻辑，常常意味着完全不同的权限判定原则和策略。所
     以这些资源不可能由通用的权限管理系统管理，只能由应用系统的相关业务逻辑程序
     来判断和处理。
3>.几篇文章：
   百度百科《RBAC》(http://baike.baidu.com/view/73432.htm)；
   一篇讲RBAC的比较全面的文章《RBAC模型（1）-yesaidu的日志-网易博客》，
   (http://blog.163.com/yesaidu@126/blog/static/51819307200711231852769/)
   这篇文章读了，你就系统了解了RBAC，非常不错。其中，关于操作的解释有段话：
   操作的类型取决于实现系统的类型。要好好理解；
   另外，《RBAC学习笔记(1):概念及模型》
   (http://blog.sina.com.cn/s/blog_531235580100azry.html)增加了Groups的概念。
4>.三个原则：
   没有安全三原则支持的RBAC系统，RBAC的主要优点就不可能得到发挥，也就不能算作真
   正的RBAC系统。
   最小权限原则、权限制约原则和权限抽象原则被认为是RBAC的安全三原则。最小权限原
   则是说在RBAC中角色被赋予完成其任务所需的最小权限；权限制约原则是说相互排斥的
   权限不应赋予同一角色，比如签发一张支票需要一个会计角色和一个出纳角色；权限抽
   象原则是说RBAC中除了操作系统中典型的“读”“写”外还支持抽象权限，如借贷、刷
   卡等。--摘自《基于角色的访问控制中的安全三原》华中科技大学学报（自然科学版）
   所以，在进行权限设置时，一定要遵循着三个原则。
5>.四个层次：
   RBAC0、RBAC1、RBAC2、RBAC3。
   我的项目要实现到RBAC1层，即Role要有继承关系的。
3. 权限控制可分两部分
1>.前台控制菜单是否显示
    a.登陆后将用户权限缓存至session。
    b.根据session里的权限控制页面菜单显示。
2>.后台每次请求控制。（这部分就是控制你说的用户直接输入url访问无权限请求）
    a.使用spring拦截器对struts每次请求进行拦截，拦截获取当前请求所访问的action
      类和方法。
    b.权限表设计的时候，多加一列，用于记录这个请求对应的struts的action类和方法。
    c.判断当前请求的action类和方法是否在session权限列表中存在，如果存在则放行，
      否则抛出无权限异常。 
4. 关于权限和菜单。
1>.借鉴网上的文章，讲菜单管理的。
2>.菜单和资源是有区别的。
   资源：id、URL、isMenu等。(后台验证)
   菜单：id、name、上级菜单id(null表示根)、同级菜单顺序、是否为叶子节点、URL。(前台展示)
   它们挂Role时，需要两个表Role资源Map(后台验证)、Role菜单Map(前台展示)？
   RBAC要实现到RBAC1层次，这样，公用的系统菜单像我的个人信息等就可以挂到一
   个BaseRole中了，然后其他的Role都继承它。类似于java，仅支持单继承。
3>.不受权限控制的资源，采用的处理方式如下：
    
5. 权限控制分为两部分：授权、权限验证。

6. 作为simplest项目的子项目，security是否能抽象出一个相对独立的组件，而为其它项目所直接引用？
   目前考虑，如果要实现的话，主要有两个包：bean包定义角色、资源、用户模型类等；service包定义逻辑，
   如登陆验证、根据用户获得角色、根据角色获取资源等。
   但难点在于：实际项目中的模型可能更复杂些，比如用户，有的可能需要定义其它的信息，如所在部门、状态
   等，但我们抽象出来的通用模型不可能有这些东西。逻辑也可能要复杂些，比如有些登陆验证时需要验证码，
   还需要验证状态等。总之，我们作为一个以简单为目的的项目，不可能抽象的特别好。
   这样的话，还不如让程序员去自己定义、实现这些东西呢。但我们可以定义几套模型类、逻辑类，仅供程序员
   参考来在自己的实际项目中定义并实现适合自己项目的模型类、逻辑类，也就是说，该子项目不会被程序员使
   用，只会他们参考。这应该也可以吧。
7. 关于权限控制的讨论，有篇文章不错，参见http://www.iteye.com/magazines/82。
8. 关于角色阶层与权限继承 ，有篇文章不错，参见http://www.gss.com.tw/index.php/eis/304。
   台湾人写的，非常好。目前我决定采用多继承(即一般继承)来实现角色继承。在这里，我也联想到java中的
   是单继承(即有限制的继承，is a)，而c++中的是多继承(即一般继承，不光是is a，还有part of)。
   今天2013.07.06我又思考了一下：或许单继承更合适：
   1>. 相对于单继承，多继承的一个最大优势应该是子(上级)角色可以通过这种方式轻松拥有若干个父(下级)
   角色的权限，但这个可以通过其他方式来解决：例如给上级分配角色时，首先要建立一个上级角色(同时分配
   相应权限)，将此角色分给他，如果他想做某个下级的权限的工作，可以将该下级的角色分给他，甚至如果
   他想只做某下级的某下级工作的话都可以将那个角色分给他，这样显得也更灵活一些。另外，实际工作中，
   作为一个上级，他一般是不会做下级的工作的，所以这个优势或许不会被经常体现出来。
   2>. 接着1说，1中的方案会造成某个人可能会有多个角色，这时候可以考虑，登陆时选择一个角色，类似于
   oracle sqlplus的登陆：sqlplus sys as sysdba，sysdba是个角色。
   3>. 单继承比较单纯，像java的单继承，子 is a 父，在建立角色体系时，只要明白这个最自然且简单明了
   的思想就好。仅这就可以很好的解决类似于菜单显示、后台访问url等这些权限控制了。这样单纯的角色继承
   只处理is a的关系，如果需要增加角色和角色的其他关系，我们再去通过别的方式处理，比如新建表来记录新
   的关系。
9. 对于匿名访问，即无需登录就可访问的资源，可新建一个Anon角色，然后将资源挂到该角色上。
   另外，对于登录用户，判断可访问的资源时，也要把上面的加上，否则，登录用户访问这些资源时会报错的。
   对于管理员，可以新建一个Admin角色，然后将所有资源挂到该角色上。还有一方案在程序里为它专门取所有的资源，
   这样在表里就不用专门插数据了。
10.关于权限和资源，考虑Permission(Resource+Operation)比仅用Resource还是要规范些，且功能更
   强大些。User的Add、View、List比仅用User功能更强大。目前更倾向于此。
11.关于资源，做权限控制时，是否要这样分类：
   首先分为非法(无效)资源(如客户手动输入了错误的URL)和合法资源(注册在我们系统中的，我们承认的)，然后
   合法资源再分为匿名(无需登录)可访问资源和登录用户可访问资源。
